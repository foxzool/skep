use bevy_utils::HashMap;
use lazy_static::lazy_static;

lazy_static! {
    pub(crate) static ref ABBREVIATIONS: HashMap<&'static str, &'static str> = {
        let mut m = HashMap::new();
        m.insert("act_t", "action_topic");
        m.insert("act_tpl", "action_template");
        m.insert("act_stat_t", "activity_state_topic");
        m.insert("act_val_tpl", "activity_value_template");
        m.insert("atype", "automation_type");
        m.insert("av_tones", "available_tones");
        m.insert("avty", "availability");
        m.insert("avty_mode", "availability_mode");
        m.insert("avty_t", "availability_topic");
        m.insert("avty_tpl", "availability_template");
        m.insert("b_tpl", "blue_template");
        m.insert("bri_cmd_tpl", "brightness_command_template");
        m.insert("bri_cmd_t", "brightness_command_topic");
        m.insert("bri_scl", "brightness_scale");
        m.insert("bri_stat_t", "brightness_state_topic");
        m.insert("bri_tpl", "brightness_template");
        m.insert("bri_val_tpl", "brightness_value_template");
        m.insert("clr_temp_cmd_tpl", "color_temp_command_template");
        m.insert("clrm", "color_mode");
        m.insert("clrm_stat_t", "color_mode_state_topic");
        m.insert("clrm_val_tpl", "color_mode_value_template");
        m.insert("clr_temp_cmd_t", "color_temp_command_topic");
        m.insert("clr_temp_stat_t", "color_temp_state_topic");
        m.insert("clr_temp_tpl", "color_temp_template");
        m.insert("clr_temp_val_tpl", "color_temp_value_template");
        m.insert("cmd_off_tpl", "command_off_template");
        m.insert("cmd_on_tpl", "command_on_template");
        m.insert("cmd_t", "command_topic");
        m.insert("cmd_tpl", "command_template");
        m.insert("cod_arm_req", "code_arm_required");
        m.insert("cod_dis_req", "code_disarm_required");
        m.insert("cod_form", "code_format");
        m.insert("cod_trig_req", "code_trigger_required");
        m.insert("cont_type", "content_type");
        m.insert("curr_hum_t", "current_humidity_topic");
        m.insert("curr_hum_tpl", "current_humidity_template");
        m.insert("curr_temp_t", "current_temperature_topic");
        m.insert("curr_temp_tpl", "current_temperature_template");
        m.insert("dev", "device");
        m.insert("dev_cla", "device_class");
        m.insert("dir_cmd_t", "direction_command_topic");
        m.insert("dir_cmd_tpl", "direction_command_template");
        m.insert("dir_stat_t", "direction_state_topic");
        m.insert("dir_val_tpl", "direction_value_template");
        m.insert("dock_cmd_t", "dock_command_topic");
        m.insert("dock_cmd_tpl", "dock_command_template");
        m.insert("e", "encoding");
        m.insert("en", "enabled_by_default");
        m.insert("ent_cat", "entity_category");
        m.insert("ent_pic", "entity_picture");
        m.insert("evt_typ", "event_types");
        m.insert("fanspd_lst", "fan_speed_list");
        m.insert("flsh_tlng", "flash_time_long");
        m.insert("flsh_tsht", "flash_time_short");
        m.insert("fx_cmd_tpl", "effect_command_template");
        m.insert("fx_cmd_t", "effect_command_topic");
        m.insert("fx_list", "effect_list");
        m.insert("fx_stat_t", "effect_state_topic");
        m.insert("fx_tpl", "effect_template");
        m.insert("fx_val_tpl", "effect_value_template");
        m.insert("exp_aft", "expire_after");
        m.insert("fan_mode_cmd_tpl", "fan_mode_command_template");
        m.insert("fan_mode_cmd_t", "fan_mode_command_topic");
        m.insert("fan_mode_stat_tpl", "fan_mode_state_template");
        m.insert("fan_mode_stat_t", "fan_mode_state_topic");
        m.insert("frc_upd", "force_update");
        m.insert("g_tpl", "green_template");
        m.insert("hs_cmd_t", "hs_command_topic");
        m.insert("hs_cmd_tpl", "hs_command_template");
        m.insert("hs_stat_t", "hs_state_topic");
        m.insert("hs_val_tpl", "hs_value_template");
        m.insert("ic", "icon");
        m.insert("img_e", "image_encoding");
        m.insert("img_t", "image_topic");
        m.insert("init", "initial");
        m.insert("hum_cmd_t", "target_humidity_command_topic");
        m.insert("hum_cmd_tpl", "target_humidity_command_template");
        m.insert("hum_stat_t", "target_humidity_state_topic");
        m.insert("hum_state_tpl", "target_humidity_state_template");
        m.insert("json_attr", "json_attributes");
        m.insert("json_attr_t", "json_attributes_topic");
        m.insert("json_attr_tpl", "json_attributes_template");
        m.insert("lrst_val_tpl", "last_reset_value_template");
        m.insert("max", "max");
        m.insert("min", "min");
        m.insert("max_hum", "max_humidity");
        m.insert("min_hum", "min_humidity");
        m.insert("max_mirs", "max_mireds");
        m.insert("min_mirs", "min_mireds");
        m.insert("max_temp", "max_temp");
        m.insert("min_temp", "min_temp");
        m.insert("mode", "mode");
        m.insert("mode_cmd_tpl", "mode_command_template");
        m.insert("mode_cmd_t", "mode_command_topic");
        m.insert("mode_stat_t", "mode_state_topic");
        m.insert("mode_stat_tpl", "mode_state_template");
        m.insert("modes", "modes");
        m.insert("name", "name");
        m.insert("o", "origin");
        m.insert("obj_id", "object_id");
        m.insert("off_dly", "off_delay");
        m.insert("on_cmd_type", "on_command_type");
        m.insert("ops", "options");
        m.insert("opt", "optimistic");
        m.insert("osc_cmd_t", "oscillation_command_topic");
        m.insert("osc_cmd_tpl", "oscillation_command_template");
        m.insert("osc_stat_t", "oscillation_state_topic");
        m.insert("osc_val_tpl", "oscillation_value_template");
        m.insert("pause_cmd_t", "pause_command_topic");
        m.insert("pause_mw_cmd_tpl", "pause_command_template");
        m.insert("pct_cmd_t", "percentage_command_topic");
        m.insert("pct_cmd_tpl", "percentage_command_template");
        m.insert("pct_stat_t", "percentage_state_topic");
        m.insert("pct_val_tpl", "percentage_value_template");
        m.insert("pl", "payload");
        m.insert("pl_arm_away", "payload_arm_away");
        m.insert("pl_arm_home", "payload_arm_home");
        m.insert("pl_arm_nite", "payload_arm_night");
        m.insert("pl_arm_vacation", "payload_arm_vacation");
        m.insert("pl_arm_custom_b", "payload_arm_custom_bypass");
        m.insert("pl_avail", "payload_available");
        m.insert("pl_cln_sp", "payload_clean_spot");
        m.insert("pl_cls", "payload_close");
        m.insert("pl_disarm", "payload_disarm");
        m.insert("pl_home", "payload_home");
        m.insert("pl_lock", "payload_lock");
        m.insert("pl_loc", "payload_locate");
        m.insert("pl_not_avail", "payload_not_available");
        m.insert("pl_not_home", "payload_not_home");
        m.insert("pl_off", "payload_off");
        m.insert("pl_on", "payload_on");
        m.insert("pl_open", "payload_open");
        m.insert("pl_osc_off", "payload_oscillation_off");
        m.insert("pl_osc_on", "payload_oscillation_on");
        m.insert("pl_paus", "payload_pause");
        m.insert("pl_prs", "payload_press");
        m.insert("pl_rst", "payload_reset");
        m.insert("pl_rst_hum", "payload_reset_humidity");
        m.insert("pl_rst_mode", "payload_reset_mode");
        m.insert("pl_rst_pct", "payload_reset_percentage");
        m.insert("pl_rst_pr_mode", "payload_reset_preset_mode");
        m.insert("pl_stop", "payload_stop");
        m.insert("pl_strt", "payload_start");
        m.insert("pl_ret", "payload_return_to_base");
        m.insert("pl_toff", "payload_turn_off");
        m.insert("pl_ton", "payload_turn_on");
        m.insert("pl_trig", "payload_trigger");
        m.insert("pl_unlk", "payload_unlock");
        m.insert("pos", "reports_position");
        m.insert("pos_clsd", "position_closed");
        m.insert("pos_open", "position_open");
        m.insert("pow_cmd_t", "power_command_topic");
        m.insert("pow_cmd_tpl", "power_command_template");
        m.insert("pr_mode_cmd_t", "preset_mode_command_topic");
        m.insert("pr_mode_cmd_tpl", "preset_mode_command_template");
        m.insert("pr_mode_stat_t", "preset_mode_state_topic");
        m.insert("pr_mode_val_tpl", "preset_mode_value_template");
        m.insert("pr_modes", "preset_modes");
        m.insert("ptrn", "pattern");
        m.insert("r_tpl", "red_template");
        m.insert("rel_s", "release_summary");
        m.insert("rel_u", "release_url");
        m.insert("ret", "retain");
        m.insert("rgb_cmd_tpl", "rgb_command_template");
        m.insert("rgb_cmd_t", "rgb_command_topic");
        m.insert("rgb_stat_t", "rgb_state_topic");
        m.insert("rgb_val_tpl", "rgb_value_template");
        m.insert("rgbw_cmd_tpl", "rgbw_command_template");
        m.insert("rgbw_cmd_t", "rgbw_command_topic");
        m.insert("rgbw_stat_t", "rgbw_state_topic");
        m.insert("rgbw_val_tpl", "rgbw_value_template");
        m.insert("rgbww_cmd_tpl", "rgbww_command_template");
        m.insert("rgbww_cmd_t", "rgbww_command_topic");
        m.insert("rgbww_stat_t", "rgbww_state_topic");
        m.insert("rgbww_val_tpl", "rgbww_value_template");
        m.insert("send_cmd_t", "send_command_topic");
        m.insert("send_if_off", "send_if_off");
        m.insert("set_fan_spd_t", "set_fan_speed_topic");
        m.insert("set_pos_tpl", "set_position_template");
        m.insert("set_pos_t", "set_position_topic");
        m.insert("pos_t", "position_topic");
        m.insert("pos_tpl", "position_template");
        m.insert("spd_rng_min", "speed_range_min");
        m.insert("spd_rng_max", "speed_range_max");
        m.insert("src_type", "source_type");
        m.insert("stat_cla", "state_class");
        m.insert("stat_clsd", "state_closed");
        m.insert("stat_closing", "state_closing");
        m.insert("stat_jam", "state_jammed");
        m.insert("stat_off", "state_off");
        m.insert("stat_on", "state_on");
        m.insert("stat_open", "state_open");
        m.insert("stat_opening", "state_opening");
        m.insert("stat_stopped", "state_stopped");
        m.insert("stat_locked", "state_locked");
        m.insert("stat_locking", "state_locking");
        m.insert("stat_unlocked", "state_unlocked");
        m.insert("stat_unlocking", "state_unlocking");
        m.insert("stat_t", "state_topic");
        m.insert("stat_tpl", "state_template");
        m.insert("stat_val_tpl", "state_value_template");
        m.insert("step", "step");
        m.insert("strt_mw_cmd_t", "start_mowing_command_topic");
        m.insert("strt_mw_cmd_tpl", "start_mowing_command_template");
        m.insert("stype", "subtype");
        m.insert("sug_dsp_prc", "suggested_display_precision");
        m.insert("sup_dur", "support_duration");
        m.insert("sup_vol", "support_volume_set");
        m.insert("sup_feat", "supported_features");
        m.insert("sup_clrm", "supported_color_modes");
        m.insert("swing_mode_cmd_tpl", "swing_mode_command_template");
        m.insert("swing_mode_cmd_t", "swing_mode_command_topic");
        m.insert("swing_mode_stat_tpl", "swing_mode_state_template");
        m.insert("swing_mode_stat_t", "swing_mode_state_topic");
        m.insert("temp_cmd_tpl", "temperature_command_template");
        m.insert("temp_cmd_t", "temperature_command_topic");
        m.insert("temp_hi_cmd_tpl", "temperature_high_command_template");
        m.insert("temp_hi_cmd_t", "temperature_high_command_topic");
        m.insert("temp_hi_stat_tpl", "temperature_high_state_template");
        m.insert("temp_hi_stat_t", "temperature_high_state_topic");
        m.insert("temp_lo_cmd_tpl", "temperature_low_command_template");
        m.insert("temp_lo_cmd_t", "temperature_low_command_topic");
        m.insert("temp_lo_stat_tpl", "temperature_low_state_template");
        m.insert("temp_lo_stat_t", "temperature_low_state_topic");
        m.insert("temp_stat_tpl", "temperature_state_template");
        m.insert("temp_stat_t", "temperature_state_topic");
        m.insert("temp_unit", "temperature_unit");
        m.insert("tilt_clsd_val", "tilt_closed_value");
        m.insert("tilt_cmd_t", "tilt_command_topic");
        m.insert("tilt_cmd_tpl", "tilt_command_template");
        m.insert("tilt_max", "tilt_max");
        m.insert("tilt_min", "tilt_min");
        m.insert("tilt_opnd_val", "tilt_opened_value");
        m.insert("tilt_opt", "tilt_optimistic");
        m.insert("tilt_status_t", "tilt_status_topic");
        m.insert("tilt_status_tpl", "tilt_status_template");
        m.insert("tit", "title");
        m.insert("t", "topic");
        m.insert("uniq_id", "unique_id");
        m.insert("unit_of_meas", "unit_of_measurement");
        m.insert("url_t", "url_topic");
        m.insert("url_tpl", "url_template");
        m.insert("val_tpl", "value_template");
        m.insert("whit_cmd_t", "white_command_topic");
        m.insert("whit_scl", "white_scale");
        m.insert("xy_cmd_t", "xy_command_topic");
        m.insert("xy_cmd_tpl", "xy_command_template");
        m.insert("xy_stat_t", "xy_state_topic");
        m.insert("xy_val_tpl", "xy_value_template");
        m.insert("l_ver_t", "latest_version_topic");
        m.insert("l_ver_tpl", "latest_version_template");
        m.insert("pl_inst", "payload_install");
        m
    };
    pub(crate) static ref DEVICE_ABBREVIATIONS: HashMap<&'static str, &'static str> = {
        let mut m = HashMap::new();
        m.insert("cns", "connections");
        m.insert("cu", "configuration_url");
        m.insert("ids", "identifiers");
        m.insert("name", "name");
        m.insert("mf", "manufacturer");
        m.insert("mdl", "model");
        m.insert("mdl_id", "model_id");
        m.insert("hw", "hw_version");
        m.insert("sw", "sw_version");
        m.insert("sa", "suggested_area");
        m.insert("sn", "serial_number");
        m
    };
    pub(crate) static ref ORIGIN_ABBREVIATIONS: HashMap<&'static str, &'static str> = {
        let mut m = HashMap::new();
        m.insert("name", "name");
        m.insert("sw", "sw_version");
        m.insert("url", "support_url");
        m
    };
}
